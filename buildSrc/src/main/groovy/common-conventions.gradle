plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    id 'org.jetbrains.kotlin.jvm'
    id 'jacoco'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

configurations {
    ktlint
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

// Kotlin settings
kotlin {
    jvmToolchain(21)
}

dependencies {
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'
    ktlint("com.pinterest:ktlint:0.49.1") {
        attributes {
            attribute(Bundling.BUNDLING_ATTRIBUTE, getObjects().named(Bundling, Bundling.EXTERNAL))
        }
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = "BUNDLE"
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
            limit {
                counter = "BRANCH"
                value = "COVEREDRATIO"
                minimum = 0.70
            }
        }
    }
}

tasks.register("ktlintCheck", JavaExec) {
    group = "verification"
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    mainClass = "com.pinterest.ktlint.Main"
    args "src/**/*.kt", "**.kts", "!**/build/**"
}

tasks.named("check") {
    dependsOn tasks.named("ktlintCheck")
    dependsOn tasks.named("jacocoTestCoverageVerification")
}

tasks.register("ktlintFormat", JavaExec) {
    group = "formatting"
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    mainClass = "com.pinterest.ktlint.Main"
    jvmArgs "--add-opens=java.base/java.lang=ALL-UNNAMED"
    args "-F", "src/**/*.kt", "**.kts", "!**/build/**"
}


jacocoTestReport {
    dependsOn test

    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}
