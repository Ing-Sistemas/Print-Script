plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    id 'org.jetbrains.kotlin.jvm'
    id 'jacoco'
    id 'checkstyle'
    id 'maven-publish'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

configurations {
    ktlint
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

// Kotlin settings
kotlin {
    jvmToolchain(21)
}

dependencies {
    implementation 'com.google.code.gson:gson:2.11.0'
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'
    ktlint("com.pinterest:ktlint:0.49.1") {
        attributes {
            attribute(Bundling.BUNDLING_ATTRIBUTE, getObjects().named(Bundling, Bundling.EXTERNAL))
        }
    }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/Ing-Sistemas/Print-Script")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}


//jacocoTestCoverageVerification {
//    violationRules {
//        rule {
//            element = "BUNDLE"
//            afterEvaluate {
//                classDirectories.setFrom(files(classDirectories.files.collect {
//                    fileTree(dir: it, exclude: 'org/example/formatter/**')
//                }))
//            }
//            limit {
//                counter = 'INSTRUCTION'
//                value = 'COVEREDRATIO'
//                minimum = 0.8
//            }
//        }
//    }
//}

    tasks.register("lintCheck", JavaExec) {
        group = "verification"
        description = "Check Kotlin code style."
        classpath = configurations.ktlint
        mainClass.set("com.pinterest.ktlint.Main")
        args('src/**/*.kt', '**/*.kts', '!build/**')
    }

    tasks.named("check") {
        dependsOn tasks.named("lintCheck")
        dependsOn tasks.named("jacocoTestCoverageVerification")
    }

    tasks.register("formatApply", JavaExec) {
        group = "formatting"
        description = "Fix Kotlin code style deviations."
        classpath = configurations.ktlint
        mainClass.set("com.pinterest.ktlint.Main")
        jvmArgs("--add-opens=java.base/java.lang=ALL-UNNAMED")
        args('-F', 'src/**/*.kt', '**/*.kts', '!build/**')
    }

    jacocoTestReport {
        dependsOn test

        reports {
            xml.required = false
            csv.required = false
            html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
        }
    }
